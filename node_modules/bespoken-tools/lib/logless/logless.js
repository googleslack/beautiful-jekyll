"use strict";
const logless_context_1 = require("../logless/logless-context");
class Logless {
    static capture(source, handler) {
        if (handler === undefined || handler === null) {
            throw new Error("Handler is null or undefined! This must be passed.");
        }
        return new LambdaWrapper(source, handler).lambdaFunction();
    }
}
Logless.Domain = "logless.bespoken.tools";
exports.Logless = Logless;
class LambdaWrapper {
    constructor(source, wrappedLambda) {
        this.source = source;
        this.wrappedLambda = wrappedLambda;
    }
    handle(event, context, callback) {
        const logger = new logless_context_1.LoglessContext(this.source);
        context.logger = logger;
        logger.onLambdaEvent(event, context, callback);
        try {
            this.wrappedLambda.call(this, event, context, logger.callback());
        }
        catch (e) {
            console.error(e);
            logger.flush();
            logger.cleanup();
        }
    }
    lambdaFunction() {
        let lambda = this.handle.bind(this);
        return lambda;
    }
}
//# sourceMappingURL=logless.js.map