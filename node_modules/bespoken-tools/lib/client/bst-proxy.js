"use strict";
const bespoke_client_1 = require("./bespoke-client");
const lambda_server_1 = require("./lambda-server");
const url_mangler_1 = require("./url-mangler");
const bst_config_1 = require("./bst-config");
const global_1 = require("../core/global");
(function (ProxyType) {
    ProxyType[ProxyType["HTTP"] = 0] = "HTTP";
    ProxyType[ProxyType["LAMBDA"] = 1] = "LAMBDA";
})(exports.ProxyType || (exports.ProxyType = {}));
var ProxyType = exports.ProxyType;
const DefaultLambdaPort = 10000;
class BSTProxy {
    constructor(proxyType) {
        this.proxyType = proxyType;
        this.bespokenClient = null;
        this.lambdaServer = null;
        this.bespokenHost = "proxy.bespoken.tools";
        this.bespokenPort = 5000;
    }
    static http(targetPort) {
        let tool = new BSTProxy(ProxyType.HTTP);
        tool.httpPort = targetPort;
        return tool;
    }
    static lambda(lambdaFile) {
        let tool = new BSTProxy(ProxyType.LAMBDA);
        tool.lambdaFile = lambdaFile;
        tool.httpPort = DefaultLambdaPort;
        return tool;
    }
    static urlgen(url) {
        return url_mangler_1.URLMangler.mangle(url, global_1.Global.config().nodeID());
    }
    bespokenServer(host, port) {
        this.bespokenHost = host;
        this.bespokenPort = port;
        return this;
    }
    lambdaPort(port) {
        this.httpPort = port;
        return this;
    }
    start(onStarted) {
        bst_config_1.BSTProcess.run(this.httpPort, this.proxyType, process.pid);
        this.bespokenClient = new bespoke_client_1.BespokeClient(global_1.Global.config().nodeID(), this.bespokenHost, this.bespokenPort, this.httpPort);
        let callbackCountDown = 1;
        const callback = function () {
            callbackCountDown--;
            if (callbackCountDown === 0 && onStarted !== undefined) {
                onStarted();
            }
        };
        this.bespokenClient.onConnect = callback;
        this.bespokenClient.connect();
        if (this.proxyType === ProxyType.LAMBDA) {
            callbackCountDown++;
            this.lambdaServer = new lambda_server_1.LambdaServer(this.lambdaFile, this.httpPort);
            this.lambdaServer.start(callback);
        }
    }
    stop(onStopped) {
        if (this.bespokenClient !== null) {
            this.bespokenClient.shutdown();
        }
        if (this.lambdaServer !== null) {
            this.lambdaServer.stop(onStopped);
        }
        else {
            if (onStopped !== undefined && onStopped !== null) {
                onStopped();
            }
        }
    }
}
exports.BSTProxy = BSTProxy;
//# sourceMappingURL=bst-proxy.js.map