"use strict";
const fs = require("fs");
const logging_helper_1 = require("../core/logging-helper");
const lambda_config_1 = require("./lambda-config");
let uuid = require("node-uuid");
const Logger = "CONFIG";
const BSTDirectoryName = ".bst";
class BSTConfig {
    constructor() {
        this.configuration = null;
        this.process = null;
    }
    static load() {
        BSTConfig.bootstrapIfNeeded();
        let data = fs.readFileSync(BSTConfig.configPath());
        let config = JSON.parse(data.toString());
        let bstConfig = new BSTConfig();
        bstConfig.loadFromJSON(config);
        return bstConfig;
    }
    save() {
        BSTConfig.saveConfig(this.configuration);
    }
    nodeID() {
        return this.configuration.nodeID;
    }
    applicationID() {
        return this.configuration.applicationID;
    }
    updateApplicationID(applicationID) {
        this.configuration.applicationID = applicationID;
        this.commit();
    }
    commit() {
        let configBuffer = new Buffer(JSON.stringify(this.configuration, null, 4) + "\n");
        fs.writeFileSync(BSTConfig.configPath(), configBuffer);
    }
    loadFromJSON(config) {
        this.configuration = config;
    }
    static configDirectory() {
        return getUserHome() + "/" + BSTDirectoryName;
    }
    static configPath() {
        return BSTConfig.configDirectory() + "/config";
    }
    static bootstrapIfNeeded() {
        let directory = BSTConfig.configDirectory();
        if (!fs.existsSync(directory)) {
            fs.mkdirSync(directory);
        }
        if (!fs.existsSync(BSTConfig.configPath())) {
            logging_helper_1.LoggingHelper.info(Logger, "No configuration. Creating one: " + BSTConfig.configPath());
            let configJSON = BSTConfig.createConfig();
            BSTConfig.saveConfig(configJSON);
        }
    }
    static saveConfig(config) {
        let configBuffer = new Buffer(JSON.stringify(config, null, 4) + "\n");
        fs.writeFileSync(BSTConfig.configPath(), configBuffer);
    }
    static createConfig() {
        let nodeID = uuid.v4();
        let lambdaConfig = lambda_config_1.LambdaConfig.defaultConfig().lambdaDeploy;
        return {
            "nodeID": nodeID,
            "lambdaDeploy": lambdaConfig
        };
    }
}
exports.BSTConfig = BSTConfig;
class BSTProcess {
    constructor() {
    }
    static running() {
        let process = null;
        if (fs.existsSync(BSTProcess.processPath())) {
            let data = fs.readFileSync(BSTProcess.processPath());
            let json = JSON.parse(data.toString());
            if (BSTProcess.isRunning(json.pid)) {
                process = new BSTProcess();
                process.loadJSON(json);
            }
        }
        return process;
    }
    static isRunning(pid) {
        try {
            process.kill(pid, 0);
            return true;
        }
        catch (e) {
            return e.code === "EPERM";
        }
    }
    static processPath() {
        return getUserHome() + "/" + BSTDirectoryName + "/process";
    }
    static run(port, proxyType, pid) {
        let process = new BSTProcess();
        process.port = port;
        process.proxyType = proxyType;
        process.pid = pid;
        let json = process.json();
        let jsonBuffer = new Buffer(JSON.stringify(json, undefined, 4) + "\n");
        fs.writeFileSync(BSTProcess.processPath(), jsonBuffer);
        return process;
    }
    kill() {
        try {
            process.kill(this.pid, "SIGKILL");
            return true;
        }
        catch (e) {
            console.error("Error killing process[" + this.pid + "] Message: " + e.message);
            return false;
        }
    }
    loadJSON(json) {
        this.port = json.port;
        this.proxyType = json.proxyType;
        this.pid = json.pid;
    }
    json() {
        return {
            "port": this.port,
            "type": this.proxyType,
            "pid": this.pid
        };
    }
}
exports.BSTProcess = BSTProcess;
function getUserHome() {
    return process.env[(process.platform === "win32") ? "USERPROFILE" : "HOME"];
}
//# sourceMappingURL=bst-config.js.map