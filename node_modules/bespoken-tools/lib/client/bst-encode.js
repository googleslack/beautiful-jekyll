"use strict";
const file_util_1 = require("../core/file-util");
const path = require("path");
const http = require("http");
const AWS = require("aws-sdk");
class BSTEncode {
    constructor(awsConfiguration) {
        this._awsConfiguration = awsConfiguration;
        if (awsConfiguration.accessKeyId === undefined) {
            awsConfiguration.accessKeyId = AWS.config.credentials.accessKeyId;
            awsConfiguration.secretAccessKey = AWS.config.credentials.secretAccessKey;
        }
    }
    encodeFileAndPublish(filePath, callback) {
        this.encodeFileAndPublishAs(filePath, null, callback);
    }
    encodeFileAndPublishAs(filePath, outputKey, callback) {
        const self = this;
        file_util_1.FileUtil.readFile(filePath, function (data) {
            const fp = path.parse(filePath);
            const filename = fp.name + fp.ext;
            self.uploadFile(self._awsConfiguration.bucket, filename, data, function (url) {
                self.callEncode(url, outputKey, function (error, encodedURL) {
                    callback(error, encodedURL);
                });
            });
        });
    }
    encodeURLAndPublish(sourceURL, callback) {
        this.encodeURLAndPublishAs(sourceURL, null, callback);
    }
    encodeURLAndPublishAs(sourceURL, outputKey, callback) {
        const self = this;
        self.callEncode(sourceURL, outputKey, function (error, encodedURL) {
            callback(error, encodedURL);
        });
    }
    uploadFile(bucket, name, data, callback) {
        if (this._awsConfiguration === undefined) {
            throw new Error("No AWS Configuration parameters defined");
        }
        const config = {
            credentials: {
                accessKeyId: this._awsConfiguration.accessKeyId,
                secretAccessKey: this._awsConfiguration.secretAccessKey
            }
        };
        const s3 = new AWS.S3(config);
        const params = { Bucket: bucket, Key: name, Body: data, ACL: "public-read" };
        s3.putObject(params, function () {
            callback(BSTEncode.urlForS3(bucket, name));
        });
    }
    callEncode(sourceURL, bucketKey, callback) {
        const self = this;
        if (bucketKey === null) {
            bucketKey = sourceURL.substring(sourceURL.lastIndexOf("/") + 1);
            if (bucketKey.indexOf("?") !== -1) {
                bucketKey = bucketKey.substring(0, bucketKey.indexOf("?"));
            }
            const basename = bucketKey.substring(0, bucketKey.indexOf("."));
            bucketKey = basename + "-encoded.mp3";
        }
        const options = {
            host: BSTEncode.EncoderHost,
            path: BSTEncode.EncoderPath,
            method: "POST",
            headers: {
                accessKeyId: this._awsConfiguration.accessKeyId,
                accessSecretKey: this._awsConfiguration.secretAccessKey,
                sourceURL: sourceURL,
                targetBucket: this.bucket(),
                targetKey: bucketKey
            }
        };
        let responseData = "";
        const request = http.request(options, function (response) {
            if (response.statusCode !== 200) {
                callback(new Error(response.statusMessage), null);
            }
            else {
                response.on("data", function (data) {
                    responseData += data.toString();
                });
                response.on("end", function () {
                    const officialURL = BSTEncode.urlForS3(self.bucket(), bucketKey);
                    callback(null, officialURL);
                });
            }
        });
        request.end();
    }
    bucket() {
        return this._awsConfiguration.bucket;
    }
    static urlForS3(bucket, key) {
        return "https://s3.amazonaws.com/" + bucket + "/" + key;
    }
}
BSTEncode.EncoderHost = "elb-ecs-bespokenencoder-dev-299768275.us-east-1.elb.amazonaws.com";
BSTEncode.EncoderPath = "/encode";
exports.BSTEncode = BSTEncode;
//# sourceMappingURL=bst-encode.js.map