"use strict";
const logging_helper_1 = require("./logging-helper");
const bst_config_1 = require("../client/bst-config");
const bst_config_2 = require("../client/bst-config");
const chalk = require("chalk");
class Global {
    static initializeCLI() {
        let originalError = console.error;
        console.error = function (message) {
            if (message !== undefined) {
                originalError(chalk.red(message));
            }
            else {
                originalError();
            }
        };
        Global.initialize(true);
        Global._configuration = bst_config_1.BSTConfig.load();
    }
    static cli() {
        return Global._cli;
    }
    static config() {
        if (Global._configuration === null) {
            Global.initialize(false);
            Global._configuration = bst_config_1.BSTConfig.load();
        }
        return Global._configuration;
    }
    static running() {
        return bst_config_2.BSTProcess.running();
    }
    static initialize(cli) {
        if (cli !== undefined && cli !== null) {
            Global._cli = cli;
        }
        logging_helper_1.LoggingHelper.initialize(cli);
    }
    static version() {
        let packageInfo = require("../../package.json");
        return packageInfo.version;
    }
}
Global.MessageDelimiter = "4772616365";
Global.MessageIDLength = 13;
Global.KeepAliveMessage = "KEEPALIVE";
Global.BespokeServerHost = "proxy.bespoken.tools";
Global._configuration = null;
Global._cli = false;
exports.Global = Global;
(function (NetworkErrorType) {
    NetworkErrorType[NetworkErrorType["CONNECTION_REFUSED"] = 0] = "CONNECTION_REFUSED";
    NetworkErrorType[NetworkErrorType["OTHER"] = 1] = "OTHER";
    NetworkErrorType[NetworkErrorType["TIME_OUT"] = 2] = "TIME_OUT";
})(exports.NetworkErrorType || (exports.NetworkErrorType = {}));
var NetworkErrorType = exports.NetworkErrorType;
//# sourceMappingURL=global.js.map