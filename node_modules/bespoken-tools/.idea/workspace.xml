<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AnalysisUIOptions">
    <option name="ANALYZE_TEST_SOURCES" value="false" />
    <option name="SCOPE_TYPE" value="3" />
    <option name="CUSTOM_SCOPE_NAME" value="Typescript Files" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="fbbf632f-9e0b-48d2-b6e9-fed3f694d071" name="Default" comment="">
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/lib/client/lambda-server.ts" afterPath="$PROJECT_DIR$/lib/client/lambda-server.ts" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/test/client/lambda-server-test.ts" afterPath="$PROJECT_DIR$/test/client/lambda-server-test.ts" />
    </list>
    <ignored path="bespoke-server.iws" />
    <ignored path=".idea/workspace.xml" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="TRACKING_ENABLED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="CreatePatchCommitExecutor">
    <option name="PATCH_PATH" value="" />
  </component>
  <component name="ExecutionTargetManager" SELECTED_TARGET="default_target" />
  <component name="FavoritesManager">
    <favorites_list name="bespoke-server" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file leaf-file-name="logless-test.ts" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/test/logless/logless-test.ts">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="270">
              <caret line="317" column="44" selection-start-line="317" selection-start-column="44" selection-end-line="317" selection-end-column="44" />
              <folding>
                <element signature="e#51#82#0" expanded="true" />
              </folding>
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="getting_started.md" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/docs/getting_started.md">
          <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
            <state split_layout="FIRST">
              <first_editor relative-caret-position="411">
                <caret line="32" column="0" selection-start-line="32" selection-start-column="0" selection-end-line="32" selection-end-column="0" />
                <folding />
              </first_editor>
              <second_editor />
            </state>
          </provider>
          <provider editor-type-id="MarkdownFxPreviewEditor">
            <state />
          </provider>
        </entry>
      </file>
      <file leaf-file-name="index.md" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/docs/index.md">
          <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
            <state split_layout="FIRST">
              <first_editor relative-caret-position="126">
                <caret line="47" column="75" selection-start-line="47" selection-start-column="13" selection-end-line="47" selection-end-column="75" />
                <folding />
              </first_editor>
              <second_editor />
            </state>
          </provider>
          <provider editor-type-id="MarkdownFxPreviewEditor">
            <state />
          </provider>
        </entry>
      </file>
      <file leaf-file-name="logless.ts" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/lib/logless/logless.ts">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="-283">
              <caret line="26" column="13" selection-start-line="26" selection-start-column="13" selection-end-line="26" selection-end-column="13" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="documenting.md" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/docs/development/documenting.md">
          <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
            <state split_layout="FIRST">
              <first_editor relative-caret-position="75">
                <caret line="6" column="1" selection-start-line="6" selection-start-column="1" selection-end-line="6" selection-end-column="1" />
                <folding />
              </first_editor>
              <second_editor />
            </state>
          </provider>
          <provider editor-type-id="MarkdownFxPreviewEditor">
            <state />
          </provider>
        </entry>
      </file>
      <file leaf-file-name="lambda-server.js" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/lib/client/lambda-server.js">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="287">
              <caret line="146" column="39" selection-start-line="146" selection-start-column="39" selection-end-line="146" selection-end-column="39" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="lambda-server-test.ts" pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/test/client/lambda-server-test.ts">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="150">
              <caret line="179" column="45" selection-start-line="179" selection-start-column="45" selection-end-line="179" selection-end-column="45" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="index.d.ts" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/node_modules/remap-istanbul/typings/browser/ambient/node/index.d.ts">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="165">
              <caret line="1449" column="20" selection-start-line="1449" selection-start-column="20" selection-end-line="1449" selection-end-column="20" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="lambda-server.ts" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/lib/client/lambda-server.ts">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="257">
              <caret line="183" column="42" selection-start-line="183" selection-start-column="42" selection-end-line="183" selection-end-column="42" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="README.md" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/README.md">
          <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
            <state split_layout="FIRST">
              <first_editor relative-caret-position="-81">
                <caret line="32" column="0" selection-start-line="32" selection-start-column="0" selection-end-line="32" selection-end-column="0" />
                <folding />
              </first_editor>
              <second_editor />
            </state>
          </provider>
          <provider editor-type-id="MarkdownFxPreviewEditor">
            <state />
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="JavaScript File" />
        <option value="TypeScript File" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/lib/client/logless.ts" />
        <option value="$PROJECT_DIR$/lib/logless/log-queue.ts" />
        <option value="$PROJECT_DIR$/test/resources/LoglessLambda.js" />
        <option value="$PROJECT_DIR$/lib/logless/logless-transaction.ts" />
        <option value="$PROJECT_DIR$/lib/core/http-buffer.ts" />
        <option value="$PROJECT_DIR$/test/core/http-buffer-test.ts" />
        <option value="$PROJECT_DIR$/lib/core/file-util.ts" />
        <option value="$PROJECT_DIR$/test/core/file-util-test.ts" />
        <option value="$PROJECT_DIR$/test/client/bst-encoder-test.ts" />
        <option value="$PROJECT_DIR$/test/client/bst-alexa-test.ts" />
        <option value="$PROJECT_DIR$/lib/client/bst-encoder.ts" />
        <option value="$PROJECT_DIR$/.npmignore" />
        <option value="$PROJECT_DIR$/lib/server/node-manager.ts" />
        <option value="$PROJECT_DIR$/lib/server/node.ts" />
        <option value="$PROJECT_DIR$/lib/core/http-client.ts" />
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/docker/Dockerfile" />
        <option value="$PROJECT_DIR$/codeship-steps.yml" />
        <option value="$PROJECT_DIR$/test/core/webhook-request-test.ts" />
        <option value="$PROJECT_DIR$/lib/server/statistics.ts" />
        <option value="$PROJECT_DIR$/lib/server/webhook-manager.ts" />
        <option value="$PROJECT_DIR$/lib/core/webhook-request.ts" />
        <option value="$PROJECT_DIR$/test/server/statistics-test.ts" />
        <option value="$PROJECT_DIR$/codeship-services.yml" />
        <option value="$PROJECT_DIR$/lib/server/bespoke-server.ts" />
        <option value="$PROJECT_DIR$/test/client/bst-deploy-test.ts" />
        <option value="$PROJECT_DIR$/test/server/bespoke-server-test.ts" />
        <option value="$PROJECT_DIR$/index.ts" />
        <option value="$PROJECT_DIR$/test/client/bst-encode-test.ts" />
        <option value="$PROJECT_DIR$/index.js" />
        <option value="$PROJECT_DIR$/test/logless/logless-test.ts" />
        <option value="$PROJECT_DIR$/lib/logless/logless-context.ts" />
        <option value="$PROJECT_DIR$/lib/client/bst-encode.ts" />
        <option value="$PROJECT_DIR$/docs/index.md" />
        <option value="$PROJECT_DIR$/docs/development/DOCUMENTATION.md" />
        <option value="$PROJECT_DIR$/docs/development/DEVELOPER.md" />
        <option value="$PROJECT_DIR$/tsconfig.json" />
        <option value="$PROJECT_DIR$/bin/bst.ts" />
        <option value="$PROJECT_DIR$/mkdocs.yml" />
        <option value="$PROJECT_DIR$/docs/api_nav.md" />
        <option value="$PROJECT_DIR$/docs/api_readme.md" />
        <option value="$PROJECT_DIR$/docs/README.raw.md" />
        <option value="$PROJECT_DIR$/gulpfile.js" />
        <option value="$PROJECT_DIR$/README.md" />
        <option value="$PROJECT_DIR$/package.json" />
        <option value="$PROJECT_DIR$/lib/logless/logless.ts" />
        <option value="$PROJECT_DIR$/docs/getting_started.md" />
        <option value="$PROJECT_DIR$/docs/development/documenting.md" />
        <option value="$PROJECT_DIR$/lib/client/lambda-server.js" />
        <option value="$PROJECT_DIR$/lib/client/lambda-server.ts" />
        <option value="$PROJECT_DIR$/test/client/lambda-server-test.ts" />
      </list>
    </option>
  </component>
  <component name="JsBuildToolGruntFileManager" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsBuildToolPackageJson" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsGulpfileManager">
    <detection-done>true</detection-done>
    <sorting>DEFINITION_ORDER</sorting>
  </component>
  <component name="NamedScopeManager">
    <scope name="Typescript Files" pattern="file[bespoke-server]:bin/*.ts||file[bespoke-server]:lib/**/*.ts||file[bespoke-server]:test/**/*.ts" />
  </component>
  <component name="NodeJsMochaPackageDirSetting">
    <data>$PROJECT_DIR$/node_modules/mocha</data>
  </component>
  <component name="NodeModulesDirectoryManager">
    <handled-path value="$PROJECT_DIR$/node_modules" />
  </component>
  <component name="ProjectFrameBounds">
    <option name="x" value="4" />
    <option name="y" value="23" />
    <option name="width" value="1436" />
    <option name="height" value="877" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="false">
    <OptionsSetting value="true" id="Add" />
    <OptionsSetting value="true" id="Remove" />
    <OptionsSetting value="true" id="Checkout" />
    <OptionsSetting value="true" id="Update" />
    <OptionsSetting value="true" id="Status" />
    <OptionsSetting value="true" id="Edit" />
    <ConfirmationsSetting value="0" id="Add" />
    <ConfirmationsSetting value="0" id="Remove" />
  </component>
  <component name="ProjectView">
    <navigator currentView="ProjectPane" proportions="" version="1">
      <flattenPackages />
      <showMembers />
      <showModules />
      <showLibraryContents />
      <hideEmptyPackages />
      <abbreviatePackageNames />
      <autoscrollToSource />
      <autoscrollFromSource />
      <sortByType />
      <manualOrder />
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <subPane>
          <PATH>
            <PATH_ELEMENT>
              <option name="myItemId" value="bespoke-server" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
            </PATH_ELEMENT>
          </PATH>
          <PATH>
            <PATH_ELEMENT>
              <option name="myItemId" value="bespoke-server" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="bespoke-server" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
          </PATH>
          <PATH>
            <PATH_ELEMENT>
              <option name="myItemId" value="bespoke-server" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="bespoke-server" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="test" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
          </PATH>
          <PATH>
            <PATH_ELEMENT>
              <option name="myItemId" value="bespoke-server" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="bespoke-server" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="test" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="client" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
          </PATH>
          <PATH>
            <PATH_ELEMENT>
              <option name="myItemId" value="bespoke-server" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="bespoke-server" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="docs" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
          </PATH>
        </subPane>
      </pane>
      <pane id="Scratches" />
      <pane id="Scope">
        <subPane subId="Project Files">
          <PATH>
            <PATH_ELEMENT USER_OBJECT="Root">
              <option name="myItemId" value="" />
              <option name="myItemType" value="" />
            </PATH_ELEMENT>
            <PATH_ELEMENT USER_OBJECT="bespoke-server">
              <option name="myItemId" value="" />
              <option name="myItemType" value="" />
            </PATH_ELEMENT>
          </PATH>
          <PATH>
            <PATH_ELEMENT USER_OBJECT="Root">
              <option name="myItemId" value="" />
              <option name="myItemType" value="" />
            </PATH_ELEMENT>
            <PATH_ELEMENT USER_OBJECT="bespoke-server">
              <option name="myItemId" value="" />
              <option name="myItemType" value="" />
            </PATH_ELEMENT>
            <PATH_ELEMENT USER_OBJECT="service">
              <option name="myItemId" value="" />
              <option name="myItemType" value="" />
            </PATH_ELEMENT>
          </PATH>
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="settings.editor.selected.configurable" value="project.propVCSSupport.Mappings" />
    <property name="settings.editor.splitter.proportion" value="0.2" />
    <property name="last_opened_file_path" value="$USER_HOME$/diag/sdkjs" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="nodejs_interpreter_path" value="$USER_HOME$/.nvm/versions/node/v4.2.2/bin/node" />
    <property name="javascript.nodejs.core.library.configured.version" value="0.12.6" />
    <property name="HbShouldOpenHtmlAsHb" value="" />
    <property name="js-jscs-nodeInterpreter" value="/usr/local/bin/node" />
    <property name="nodejs.mocha.node_interpreter_path" value="/usr/local/bin/node" />
    <property name="nodejs.mocha.mocha_node_package_dir" value="$PROJECT_DIR$/node_modules/mocha" />
    <property name="js-tslint-nodeInterpreter" value="/usr/local/bin/node" />
    <property name="JavaScriptPreferStrict" value="false" />
    <property name="JavaScriptWeakerCompletionTypeGuess" value="true" />
    <property name="js-tslint-package" value="$PROJECT_DIR$/node_modules/tslint" />
    <property name="FileHistory.git4idea.history.GitHistoryProvider_flatWidth0" value="134" />
    <property name="FileHistory.git4idea.history.GitHistoryProvider_flatOrder0" value="0" />
    <property name="FileHistory.git4idea.history.GitHistoryProvider_flatWidth1" value="159" />
    <property name="FileHistory.git4idea.history.GitHistoryProvider_flatOrder1" value="1" />
    <property name="FileHistory.git4idea.history.GitHistoryProvider_flatWidth2" value="164" />
    <property name="FileHistory.git4idea.history.GitHistoryProvider_flatOrder2" value="2" />
    <property name="FileHistory.git4idea.history.GitHistoryProvider_flatWidth3" value="949" />
    <property name="FileHistory.git4idea.history.GitHistoryProvider_flatOrder3" value="3" />
    <property name="FileHistory.git4idea.history.GitHistoryProvider_treeWidth0" value="146" />
    <property name="FileHistory.git4idea.history.GitHistoryProvider_treeOrder0" value="0" />
    <property name="FileHistory.git4idea.history.GitHistoryProvider_treeWidth1" value="155" />
    <property name="FileHistory.git4idea.history.GitHistoryProvider_treeOrder1" value="1" />
    <property name="FileHistory.git4idea.history.GitHistoryProvider_treeWidth2" value="160" />
    <property name="FileHistory.git4idea.history.GitHistoryProvider_treeOrder2" value="2" />
    <property name="FileHistory.git4idea.history.GitHistoryProvider_treeWidth3" value="945" />
    <property name="FileHistory.git4idea.history.GitHistoryProvider_treeOrder3" value="3" />
    <property name="recentsLimit" value="100" />
  </component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/docker" />
      <recent name="$PROJECT_DIR$" />
      <recent name="$PROJECT_DIR$/test/resources" />
      <recent name="$PROJECT_DIR$/lib/logless" />
      <recent name="$PROJECT_DIR$/docs/commands" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/docs/development" />
      <recent name="$PROJECT_DIR$/docs/developer" />
      <recent name="$PROJECT_DIR$/lib/logless" />
      <recent name="$PROJECT_DIR$/test/resources/speechAssets" />
      <recent name="$PROJECT_DIR$/lib/client" />
    </key>
  </component>
  <component name="RunManager" selected="Mocha.test/client/lambda-server-test.ts">
    <configuration default="false" name="test/alexa/alexa-test.ts" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST_FILE</test-kind>
      <test-file>$PROJECT_DIR$/test/alexa/alexa-test.ts</test-file>
      <method />
    </configuration>
    <configuration default="false" name="BSTAlexa.AudioPlayer Tests.#on().Audio Item Started Event received" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-alexa-test.ts</test-file>
      <test-names>
        <name value="BSTAlexa" />
        <name value="AudioPlayer Tests" />
        <name value="#on()" />
        <name value="Audio Item Started Event received" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTAlexa.AudioPlayer Tests.#once().Audio Item Started Event received" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-alexa-test.ts</test-file>
      <test-names>
        <name value="BSTAlexa" />
        <name value="AudioPlayer Tests" />
        <name value="#once()" />
        <name value="Audio Item Started Event received" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTAlexa.AudioPlayer Tests.#playbackNearlyFinished().Audio Item Finished" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-alexa-test.ts</test-file>
      <test-names>
        <name value="BSTAlexa" />
        <name value="AudioPlayer Tests" />
        <name value="#playbackNearlyFinished()" />
        <name value="Audio Item Finished" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTAlexa.AudioPlayer Tests.#playbackNearlyFinished().Audio Item Nearly Finished" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-alexa-test.ts</test-file>
      <test-names>
        <name value="BSTAlexa" />
        <name value="AudioPlayer Tests" />
        <name value="#playbackNearlyFinished()" />
        <name value="Audio Item Nearly Finished" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTAlexa.Speaks and Intends.#on().On no match for event" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-alexa-test.ts</test-file>
      <test-names>
        <name value="BSTAlexa" />
        <name value="Speaks and Intends" />
        <name value="#on()" />
        <name value="On no match for event" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTAlexa.Speaks and Intends.#once().Once skill response received" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-alexa-test.ts</test-file>
      <test-names>
        <name value="BSTAlexa" />
        <name value="Speaks and Intends" />
        <name value="#once()" />
        <name value="Once skill response received" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTAlexa.Speaks and Intends.#on().On skill response received" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-alexa-test.ts</test-file>
      <test-names>
        <name value="BSTAlexa" />
        <name value="Speaks and Intends" />
        <name value="#on()" />
        <name value="On skill response received" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTAlexa.Speaks and Intends.#once().On no match for event" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-alexa-test.ts</test-file>
      <test-names>
        <name value="BSTAlexa" />
        <name value="Speaks and Intends" />
        <name value="#once()" />
        <name value="On no match for event" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Alexa.#spoken().Handles session attributes" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/alexa/alexa-test.ts</test-file>
      <test-names>
        <name value="Alexa" />
        <name value="#spoken()" />
        <name value="Handles session attributes" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="AudioPlayer.#play.Plays a track, stops" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/alexa/audio-player-test.ts</test-file>
      <test-names>
        <name value="AudioPlayer" />
        <name value="#play" />
        <name value="Plays a track, stops" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTAlexa.Speaks and Intends.#once().On no match for audio event" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-alexa-test.ts</test-file>
      <test-names>
        <name value="BSTAlexa" />
        <name value="Speaks and Intends" />
        <name value="#once()" />
        <name value="On no match for audio event" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTAlexa.Speaks and Intends.#on().On no match for audio event" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-alexa-test.ts</test-file>
      <test-names>
        <name value="BSTAlexa" />
        <name value="Speaks and Intends" />
        <name value="#on()" />
        <name value="On no match for audio event" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTAlexa.AudioPlayer Tests.#playbackFinished().Audio Item Finished" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-alexa-test.ts</test-file>
      <test-names>
        <name value="BSTAlexa" />
        <name value="AudioPlayer Tests" />
        <name value="#playbackFinished()" />
        <name value="Audio Item Finished" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="ServiceRequest.#intentRequest().Correctly parses intents" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/alexa/service-request-test.ts</test-file>
      <test-names>
        <name value="ServiceRequest" />
        <name value="#intentRequest()" />
        <name value="Correctly parses intents" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="test/client/bst-alexa-test.ts" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST_FILE</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-alexa-test.ts</test-file>
      <method />
    </configuration>
    <configuration default="false" name="BSTAlexa.Speaks and Intends.#intended().Intended with bad intent" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-alexa-test.ts</test-file>
      <test-names>
        <name value="BSTAlexa" />
        <name value="Speaks and Intends" />
        <name value="#intended()" />
        <name value="Intended with bad intent" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="LambdaServer" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>SUITE</test-kind>
      <test-file>$PROJECT_DIR$/test/client/lambda-server-test.ts</test-file>
      <test-names>
        <name value="LambdaServer" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="LambdaServer.#start().Uses Callback Successfully" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/lambda-server-test.ts</test-file>
      <test-names>
        <name value="LambdaServer" />
        <name value="#start()" />
        <name value="Uses Callback Successfully" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="LambdaServer.#start().Checks Context Stuff" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/lambda-server-test.ts</test-file>
      <test-names>
        <name value="LambdaServer" />
        <name value="#start()" />
        <name value="Checks Context Stuff" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="test/alexa/audio-player-test.ts" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST_FILE</test-kind>
      <test-file>$PROJECT_DIR$/test/alexa/audio-player-test.ts</test-file>
      <method />
    </configuration>
    <configuration default="false" name="AudioPlayer.#play.Enqueues a track, existing track is playing" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/alexa/audio-player-test.ts</test-file>
      <test-names>
        <name value="AudioPlayer" />
        <name value="#play" />
        <name value="Enqueues a track, existing track is playing" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTAlexa.AudioPlayer Tests.#playbackStopped().PlaybackStopped" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-alexa-test.ts</test-file>
      <test-names>
        <name value="BSTAlexa" />
        <name value="AudioPlayer Tests" />
        <name value="#playbackStopped()" />
        <name value="PlaybackStopped" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Logging Using the Lambda Context.Logs stuff" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Logging Using the Lambda Context" />
        <name value="Logs stuff" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Logging Using the Lambda Context.Logs stuff on done" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Logging Using the Lambda Context" />
        <name value="Logs stuff on done" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Logging Using the Lambda Context.Logs stuff on succeed" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Logging Using the Lambda Context" />
        <name value="Logs stuff on succeed" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Logging Using the Lambda Context.Logs stuff on done with error" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Logging Using the Lambda Context" />
        <name value="Logs stuff on done with error" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>SUITE</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Logging Stuff on Callback.Logs stuff on done" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Logging Stuff on Callback" />
        <name value="Logs stuff on done" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Logging Stuff on Callback.Logs stuff on callback with results" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Logging Stuff on Callback" />
        <name value="Logs stuff on callback with results" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTEncoder.#encodeAndPublish().Encodes and Publishes" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-encoder-test.ts</test-file>
      <test-names>
        <name value="BSTEncoder" />
        <name value="#encodeAndPublish()" />
        <name value="Encodes and Publishes" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTEncoder.#encodeAndPublish().Bad URL" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-encoder-test.ts</test-file>
      <test-names>
        <name value="BSTEncoder" />
        <name value="#encodeAndPublish()" />
        <name value="Bad URL" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTEncoder.#encodeAndPublishFile().Encodes and Publishes a file" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-encoder-test.ts</test-file>
      <test-names>
        <name value="BSTEncoder" />
        <name value="#encodeAndPublishFile()" />
        <name value="Encodes and Publishes a file" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTEncoder.#encodeAndPublishURL().Encodes and Publishes a URL" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-encoder-test.ts</test-file>
      <test-names>
        <name value="BSTEncoder" />
        <name value="#encodeAndPublishURL()" />
        <name value="Encodes and Publishes a URL" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Logging Stuff on Callback.Logs stuff on callback with error" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Logging Stuff on Callback" />
        <name value="Logs stuff on callback with error" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Logging Stuff on Callback.Logs stuff on callback with 'plain' error" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Logging Stuff on Callback" />
        <name value="Logs stuff on callback with 'plain' error" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Logging Stuff on Callback.Logs stuff on callback with system error" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Logging Stuff on Callback" />
        <name value="Logs stuff on callback with system error" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Logging Using the Lambda Context.Logs stuff on exception" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Logging Using the Lambda Context" />
        <name value="Logs stuff on exception" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Logging Using the Lambda Context.Logs stuff on throws a string" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Logging Using the Lambda Context" />
        <name value="Logs stuff on throws a string" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="test/logless/logless-test.ts" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>$USER_HOME$/.nvm/versions/node/v4.3.2/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST_FILE</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Logging Using the Lambda Context.Logs stuff on fail" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Logging Using the Lambda Context" />
        <name value="Logs stuff on fail" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Logging Using the Lambda Context.Logs stuff on timer" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Logging Using the Lambda Context" />
        <name value="Logs stuff on timer" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Handles Exceptions.Logs stuff on throws a string" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Handles Exceptions" />
        <name value="Logs stuff on throws a string" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Handles Exceptions.Logs stuff on exception" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Handles Exceptions" />
        <name value="Logs stuff on exception" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Handles Exceptions.Logs stuff on uncaught exception" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Handles Exceptions" />
        <name value="Logs stuff on uncaught exception" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Handles Exceptions" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>SUITE</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Handles Exceptions" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Logging Using the Lambda Context.Logs real stuff" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Logging Using the Lambda Context" />
        <name value="Logs real stuff" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="HTTPBuffer.HTTPResponse tests.Chunked payload, headers and body split" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/core/http-buffer-test.ts</test-file>
      <test-names>
        <name value="HTTPBuffer" />
        <name value="HTTPResponse tests" />
        <name value="Chunked payload, headers and body split" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTEncoder.#encodeAndPublishURL().Encodes and Publishes a URL that is m4a" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-encoder-test.ts</test-file>
      <test-names>
        <name value="BSTEncoder" />
        <name value="#encodeAndPublishURL()" />
        <name value="Encodes and Publishes a URL that is m4a" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTEncoder.#encodeAndPublishURL().Tries to encode bad URL" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-encoder-test.ts</test-file>
      <test-names>
        <name value="BSTEncoder" />
        <name value="#encodeAndPublishURL()" />
        <name value="Tries to encode bad URL" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="FileUtil.#read().Reads and returns a buffer" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/core/file-util-test.ts</test-file>
      <test-names>
        <name value="FileUtil" />
        <name value="#read()" />
        <name value="Reads and returns a buffer" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="FileUtil.#read()" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>SUITE</test-kind>
      <test-file>$PROJECT_DIR$/test/core/file-util-test.ts</test-file>
      <test-names>
        <name value="FileUtil" />
        <name value="#read()" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="FileUtil.copy().Copies a file" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/core/file-util-test.ts</test-file>
      <test-names>
        <name value="FileUtil" />
        <name value="copy()" />
        <name value="Copies a file" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="FileUtil.copy().Fails to copy a file" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/core/file-util-test.ts</test-file>
      <test-names>
        <name value="FileUtil" />
        <name value="copy()" />
        <name value="Fails to copy a file" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="FileUtil.copy().Fails to copy a file - bad target" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/core/file-util-test.ts</test-file>
      <test-names>
        <name value="FileUtil" />
        <name value="copy()" />
        <name value="Fails to copy a file - bad target" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="test/core/file-util-test.ts" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST_FILE</test-kind>
      <test-file>$PROJECT_DIR$/test/core/file-util-test.ts</test-file>
      <method />
    </configuration>
    <configuration default="false" name="test/client/bst-encoder-test.ts" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST_FILE</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-encoder-test.ts</test-file>
      <method />
    </configuration>
    <configuration default="false" name="test/client/bst-encode-test.ts" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>$USER_HOME$/.nvm/versions/node/v4.3.2/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs>
        <env name="AWS_ACCESS_KEY_ID" value="AKIAJ7VXE3U435QBVTFQ" />
        <env name="AWS_SECRET_ACCESS_KEY" value="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" />
      </envs>
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST_FILE</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-encode-test.ts</test-file>
      <method />
    </configuration>
    <configuration default="false" name="BSTEncode.#encodeAndPublishFile().Encodes and Publishes a file" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-encode-test.ts</test-file>
      <test-names>
        <name value="BSTEncode" />
        <name value="#encodeAndPublishFile()" />
        <name value="Encodes and Publishes a file" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTEncode.#encodeAndPublishURL().Encodes and Publishes a URL that is m4a" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-encode-test.ts</test-file>
      <test-names>
        <name value="BSTEncode" />
        <name value="#encodeAndPublishURL()" />
        <name value="Encodes and Publishes a URL that is m4a" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTEncode.#encodeAndPublishURL().Encodes and Publishes a URL" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-encode-test.ts</test-file>
      <test-names>
        <name value="BSTEncode" />
        <name value="#encodeAndPublishURL()" />
        <name value="Encodes and Publishes a URL" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="StatisticsTest.#capture().Captures Node ID stats" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/server/statistics-test.ts</test-file>
      <test-names>
        <name value="StatisticsTest" />
        <name value="#capture()" />
        <name value="Captures Node ID stats" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="StatisticsTest.#delete().Captures Node ID stats" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/server/statistics-test.ts</test-file>
      <test-names>
        <name value="StatisticsTest" />
        <name value="#delete()" />
        <name value="Captures Node ID stats" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="StatisticsTest.#delete().Deletes and recreates table" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/server/statistics-test.ts</test-file>
      <test-names>
        <name value="StatisticsTest" />
        <name value="#delete()" />
        <name value="Deletes and recreates table" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="test/server/statistics-test.ts" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST_FILE</test-kind>
      <test-file>$PROJECT_DIR$/test/server/statistics-test.ts</test-file>
      <method />
    </configuration>
    <configuration default="false" name="StatisticsTest.#delete().Creates and deletes table" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/server/statistics-test.ts</test-file>
      <test-names>
        <name value="StatisticsTest" />
        <name value="#delete()" />
        <name value="Creates and deletes table" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="test/server/bespoke-server-test.ts" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST_FILE</test-kind>
      <test-file>$PROJECT_DIR$/test/server/bespoke-server-test.ts</test-file>
      <method />
    </configuration>
    <configuration default="false" name="BespokeServerTest.ReceiveWebhook.Connects NoOp Lambda" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/server/bespoke-server-test.ts</test-file>
      <test-names>
        <name value="BespokeServerTest" />
        <name value="ReceiveWebhook" />
        <name value="Connects NoOp Lambda" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BespokeServerTest.ReceiveWebhook.Connects Multiple Lambdas" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs>
        <env name="AWS_ACCESS_KEY_ID" value="AKIAJ7VXE3U435QBVTFQ" />
        <env name="AWS_SECRET_ACCESS_KEY" value="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" />
      </envs>
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/server/bespoke-server-test.ts</test-file>
      <test-names>
        <name value="BespokeServerTest" />
        <name value="ReceiveWebhook" />
        <name value="Connects Multiple Lambdas" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="WebhookRequest.SimplePost.Has lower-case headers" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/core/webhook-request-test.ts</test-file>
      <test-names>
        <name value="WebhookRequest" />
        <name value="SimplePost" />
        <name value="Has lower-case headers" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="WebhookRequest.SimplePost.Has path" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/core/webhook-request-test.ts</test-file>
      <test-names>
        <name value="WebhookRequest" />
        <name value="SimplePost" />
        <name value="Has path" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="WebhookRequest.SimplePost.All Data At Once" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/core/webhook-request-test.ts</test-file>
      <test-names>
        <name value="WebhookRequest" />
        <name value="SimplePost" />
        <name value="All Data At Once" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="test/core/webhook-request-test.ts" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST_FILE</test-kind>
      <test-file>$PROJECT_DIR$/test/core/webhook-request-test.ts</test-file>
      <method />
    </configuration>
    <configuration default="false" name="test/client/bst-deploy-test.ts" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST_FILE</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-deploy-test.ts</test-file>
      <method />
    </configuration>
    <configuration default="false" name="LambdaDeploy.prepares the lambda function code.runs npm" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-deploy-test.ts</test-file>
      <test-names>
        <name value="LambdaDeploy" />
        <name value="prepares the lambda function code" />
        <name value="runs npm" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Logging Using the Lambda Context.Throws error if there is no handler passed" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Logging Using the Lambda Context" />
        <name value="Throws error if there is no handler passed" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="BSTEncode.#encodeAndPublishURL().Encodes and Publishes a URL as another name" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/client/bst-encode-test.ts</test-file>
      <test-names>
        <name value="BSTEncode" />
        <name value="#encodeAndPublishURL()" />
        <name value="Encodes and Publishes a URL as another name" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="typedoc.js" type="NodeJSConfigurationType" factoryName="Node.js" temporary="true" path-to-node="project" path-to-js-file="typedoc.js" working-dir="$PROJECT_DIR$">
      <method />
    </configuration>
    <configuration default="false" name="Logless.#cleanup().Removes the correct listener" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="#cleanup()" />
        <name value="Removes the correct listener" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.#cleanup().Removes the correct listener on callback" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="#cleanup()" />
        <name value="Removes the correct listener on callback" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.#cleanup().Removes the correct listener on done" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="#cleanup()" />
        <name value="Removes the correct listener on done" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.#cleanup().Removes the correct listener on exception" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="#cleanup()" />
        <name value="Removes the correct listener on exception" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Network Issues.Handles wrong domain" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Network Issues" />
        <name value="Handles wrong domain" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="Logless.Network Issues.Handles non-response domain" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST</test-kind>
      <test-file>$PROJECT_DIR$/test/logless/logless-test.ts</test-file>
      <test-names>
        <name value="Logless" />
        <name value="Network Issues" />
        <name value="Handles non-response domain" />
      </test-names>
      <method />
    </configuration>
    <configuration default="false" name="test/client/lambda-server-test.ts" type="mocha-javascript-test-runner" factoryName="Mocha" temporary="true" nameIsGenerated="true">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options>--require ts-node/register</extra-mocha-options>
      <test-kind>TEST_FILE</test-kind>
      <test-file>$PROJECT_DIR$/test/client/lambda-server-test.ts</test-file>
      <method />
    </configuration>
    <configuration default="true" type="DartCommandLineRunConfigurationType" factoryName="Dart Command Line Application">
      <method />
    </configuration>
    <configuration default="true" type="DartTestRunConfigurationType" factoryName="Dart Test">
      <method />
    </configuration>
    <configuration default="true" type="JavaScriptTestRunnerKarma" factoryName="Karma">
      <config-file value="" />
      <node-interpreter value="project" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="JavascriptDebugType" factoryName="JavaScript Debug">
      <method />
    </configuration>
    <configuration default="true" type="NodeJSConfigurationType" factoryName="Node.js" path-to-node="project" working-dir="">
      <method />
    </configuration>
    <configuration default="true" type="cucumber.js" factoryName="Cucumber.js">
      <option name="cucumberJsArguments" value="" />
      <option name="executablePath" />
      <option name="filePath" />
      <method />
    </configuration>
    <configuration default="true" type="js.build_tools.gulp" factoryName="Gulp.js">
      <node-interpreter>project</node-interpreter>
      <node-options />
      <gulpfile />
      <tasks />
      <arguments />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="js.build_tools.npm" factoryName="npm">
      <command value="run-script" />
      <scripts />
      <node-interpreter value="project" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="mocha-javascript-test-runner" factoryName="Mocha">
      <node-interpreter>/usr/local/bin/node</node-interpreter>
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options />
      <test-kind>DIRECTORY</test-kind>
      <test-directory />
      <recursive>false</recursive>
      <method />
    </configuration>
    <configuration default="false" name="speak" type="NodeJSConfigurationType" factoryName="Node.js" singleton="false" path-to-node="/usr/local/bin/node" path-to-js-file="bin/bst.js" application-parameters="speak With Slot {JPK}" working-dir="$PROJECT_DIR$/test/resources">
      <envs>
        <env name="DEBUG" value="bespoke-server:*" />
      </envs>
      <browser url="http://localhost:3000/" />
      <EXTENSION ID="com.jetbrains.nodejs.run.NodeJSStartBrowserRunConfigurationExtension">
        <browser url="http://localhost:3000/" />
      </EXTENSION>
      <method />
    </configuration>
    <configuration default="false" name="Proxy Lambda" type="NodeJSConfigurationType" factoryName="Node.js" path-to-node="/usr/local/bin/node" path-to-js-file="bin/bst.js" application-parameters="proxy test/resources/exampleProject/ExampleLambda.js" working-dir="$PROJECT_DIR$">
      <profiling v8-profiler-path="" />
      <EXTENSION ID="com.jetbrains.nodejs.run.NodeJSProfilingRunConfigurationExtension">
        <profiling v8-profiler-path="" />
      </EXTENSION>
      <method />
    </configuration>
    <configuration default="false" name="Server" type="NodeJSConfigurationType" factoryName="Node.js" singleton="false" path-to-node="/usr/local/bin/node" path-to-js-file="bin/bst-server.js" application-parameters="start 4000 5000" working-dir="$PROJECT_DIR$">
      <profiling v8-profiler-path="" />
      <EXTENSION ID="com.jetbrains.nodejs.run.NodeJSProfilingRunConfigurationExtension">
        <profiling v8-profiler-path="" />
      </EXTENSION>
      <method />
    </configuration>
    <list size="89">
      <item index="0" class="java.lang.String" itemvalue="Node.js.lambda-runner" />
      <item index="1" class="java.lang.String" itemvalue="Node.js.speak" />
      <item index="2" class="java.lang.String" itemvalue="Node.js.Proxy Lambda" />
      <item index="3" class="java.lang.String" itemvalue="Node.js.Server" />
      <item index="4" class="java.lang.String" itemvalue="Mocha.test/alexa/alexa-test.ts" />
      <item index="5" class="java.lang.String" itemvalue="Mocha.BSTAlexa.AudioPlayer Tests.#on().Audio Item Started Event received" />
      <item index="6" class="java.lang.String" itemvalue="Mocha.BSTAlexa.AudioPlayer Tests.#once().Audio Item Started Event received" />
      <item index="7" class="java.lang.String" itemvalue="Mocha.BSTAlexa.AudioPlayer Tests.#playbackNearlyFinished().Audio Item Finished" />
      <item index="8" class="java.lang.String" itemvalue="Mocha.BSTAlexa.AudioPlayer Tests.#playbackNearlyFinished().Audio Item Nearly Finished" />
      <item index="9" class="java.lang.String" itemvalue="Mocha.BSTAlexa.Speaks and Intends.#on().On no match for event" />
      <item index="10" class="java.lang.String" itemvalue="Mocha.BSTAlexa.Speaks and Intends.#once().Once skill response received" />
      <item index="11" class="java.lang.String" itemvalue="Mocha.BSTAlexa.Speaks and Intends.#on().On skill response received" />
      <item index="12" class="java.lang.String" itemvalue="Mocha.BSTAlexa.Speaks and Intends.#once().On no match for event" />
      <item index="13" class="java.lang.String" itemvalue="Mocha.Alexa.#spoken().Handles session attributes" />
      <item index="14" class="java.lang.String" itemvalue="Mocha.AudioPlayer.#play.Plays a track, stops" />
      <item index="15" class="java.lang.String" itemvalue="Mocha.BSTAlexa.Speaks and Intends.#once().On no match for audio event" />
      <item index="16" class="java.lang.String" itemvalue="Mocha.BSTAlexa.Speaks and Intends.#on().On no match for audio event" />
      <item index="17" class="java.lang.String" itemvalue="Mocha.BSTAlexa.AudioPlayer Tests.#playbackFinished().Audio Item Finished" />
      <item index="18" class="java.lang.String" itemvalue="Mocha.ServiceRequest.#intentRequest().Correctly parses intents" />
      <item index="19" class="java.lang.String" itemvalue="Mocha.test/client/bst-alexa-test.ts" />
      <item index="20" class="java.lang.String" itemvalue="Mocha.BSTAlexa.Speaks and Intends.#intended().Intended with bad intent" />
      <item index="21" class="java.lang.String" itemvalue="Mocha.LambdaServer" />
      <item index="22" class="java.lang.String" itemvalue="Mocha.LambdaServer.#start().Uses Callback Successfully" />
      <item index="23" class="java.lang.String" itemvalue="Mocha.LambdaServer.#start().Checks Context Stuff" />
      <item index="24" class="java.lang.String" itemvalue="Mocha.test/alexa/audio-player-test.ts" />
      <item index="25" class="java.lang.String" itemvalue="Mocha.AudioPlayer.#play.Enqueues a track, existing track is playing" />
      <item index="26" class="java.lang.String" itemvalue="Mocha.BSTAlexa.AudioPlayer Tests.#playbackStopped().PlaybackStopped" />
      <item index="27" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Logs stuff" />
      <item index="28" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Logs stuff on done" />
      <item index="29" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Logs stuff on succeed" />
      <item index="30" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Logs stuff on done with error" />
      <item index="31" class="java.lang.String" itemvalue="Mocha.Logless" />
      <item index="32" class="java.lang.String" itemvalue="Mocha.Logless.Logging Stuff on Callback.Logs stuff on done" />
      <item index="33" class="java.lang.String" itemvalue="Mocha.Logless.Logging Stuff on Callback.Logs stuff on callback with results" />
      <item index="34" class="java.lang.String" itemvalue="Mocha.BSTEncoder.#encodeAndPublish().Encodes and Publishes" />
      <item index="35" class="java.lang.String" itemvalue="Mocha.BSTEncoder.#encodeAndPublish().Bad URL" />
      <item index="36" class="java.lang.String" itemvalue="Mocha.BSTEncoder.#encodeAndPublishFile().Encodes and Publishes a file" />
      <item index="37" class="java.lang.String" itemvalue="Mocha.BSTEncoder.#encodeAndPublishURL().Encodes and Publishes a URL" />
      <item index="38" class="java.lang.String" itemvalue="Mocha.Logless.Logging Stuff on Callback.Logs stuff on callback with error" />
      <item index="39" class="java.lang.String" itemvalue="Mocha.Logless.Logging Stuff on Callback.Logs stuff on callback with 'plain' error" />
      <item index="40" class="java.lang.String" itemvalue="Mocha.Logless.Logging Stuff on Callback.Logs stuff on callback with system error" />
      <item index="41" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Logs stuff on exception" />
      <item index="42" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Logs stuff on throws a string" />
      <item index="43" class="java.lang.String" itemvalue="Mocha.test/logless/logless-test.ts" />
      <item index="44" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Logs stuff on fail" />
      <item index="45" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Logs stuff on timer" />
      <item index="46" class="java.lang.String" itemvalue="Mocha.Logless.Handles Exceptions.Logs stuff on throws a string" />
      <item index="47" class="java.lang.String" itemvalue="Mocha.Logless.Handles Exceptions.Logs stuff on exception" />
      <item index="48" class="java.lang.String" itemvalue="Mocha.Logless.Handles Exceptions.Logs stuff on uncaught exception" />
      <item index="49" class="java.lang.String" itemvalue="Mocha.Logless.Handles Exceptions" />
      <item index="50" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Logs real stuff" />
      <item index="51" class="java.lang.String" itemvalue="Mocha.HTTPBuffer.HTTPResponse tests.Chunked payload, headers and body split" />
      <item index="52" class="java.lang.String" itemvalue="Mocha.BSTEncoder.#encodeAndPublishURL().Encodes and Publishes a URL that is m4a" />
      <item index="53" class="java.lang.String" itemvalue="Mocha.BSTEncoder.#encodeAndPublishURL().Tries to encode bad URL" />
      <item index="54" class="java.lang.String" itemvalue="Mocha.FileUtil.#read().Reads and returns a buffer" />
      <item index="55" class="java.lang.String" itemvalue="Mocha.FileUtil.#read()" />
      <item index="56" class="java.lang.String" itemvalue="Mocha.FileUtil.copy().Copies a file" />
      <item index="57" class="java.lang.String" itemvalue="Mocha.FileUtil.copy().Fails to copy a file" />
      <item index="58" class="java.lang.String" itemvalue="Mocha.FileUtil.copy().Fails to copy a file - bad target" />
      <item index="59" class="java.lang.String" itemvalue="Mocha.test/core/file-util-test.ts" />
      <item index="60" class="java.lang.String" itemvalue="Mocha.test/client/bst-encoder-test.ts" />
      <item index="61" class="java.lang.String" itemvalue="Mocha.test/client/bst-encode-test.ts" />
      <item index="62" class="java.lang.String" itemvalue="Mocha.BSTEncode.#encodeAndPublishFile().Encodes and Publishes a file" />
      <item index="63" class="java.lang.String" itemvalue="Mocha.BSTEncode.#encodeAndPublishURL().Encodes and Publishes a URL that is m4a" />
      <item index="64" class="java.lang.String" itemvalue="Mocha.BSTEncode.#encodeAndPublishURL().Encodes and Publishes a URL" />
      <item index="65" class="java.lang.String" itemvalue="Mocha.StatisticsTest.#capture().Captures Node ID stats" />
      <item index="66" class="java.lang.String" itemvalue="Mocha.StatisticsTest.#delete().Captures Node ID stats" />
      <item index="67" class="java.lang.String" itemvalue="Mocha.StatisticsTest.#delete().Deletes and recreates table" />
      <item index="68" class="java.lang.String" itemvalue="Mocha.test/server/statistics-test.ts" />
      <item index="69" class="java.lang.String" itemvalue="Mocha.StatisticsTest.#delete().Creates and deletes table" />
      <item index="70" class="java.lang.String" itemvalue="Mocha.test/server/bespoke-server-test.ts" />
      <item index="71" class="java.lang.String" itemvalue="Mocha.BespokeServerTest.ReceiveWebhook.Connects NoOp Lambda" />
      <item index="72" class="java.lang.String" itemvalue="Mocha.BespokeServerTest.ReceiveWebhook.Connects Multiple Lambdas" />
      <item index="73" class="java.lang.String" itemvalue="Mocha.WebhookRequest.SimplePost.Has lower-case headers" />
      <item index="74" class="java.lang.String" itemvalue="Mocha.WebhookRequest.SimplePost.Has path" />
      <item index="75" class="java.lang.String" itemvalue="Mocha.WebhookRequest.SimplePost.All Data At Once" />
      <item index="76" class="java.lang.String" itemvalue="Mocha.test/core/webhook-request-test.ts" />
      <item index="77" class="java.lang.String" itemvalue="Mocha.test/client/bst-deploy-test.ts" />
      <item index="78" class="java.lang.String" itemvalue="Mocha.LambdaDeploy.prepares the lambda function code.runs npm" />
      <item index="79" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Throws error if there is no handler passed" />
      <item index="80" class="java.lang.String" itemvalue="Mocha.BSTEncode.#encodeAndPublishURL().Encodes and Publishes a URL as another name" />
      <item index="81" class="java.lang.String" itemvalue="Node.js.typedoc.js" />
      <item index="82" class="java.lang.String" itemvalue="Mocha.Logless.#cleanup().Removes the correct listener" />
      <item index="83" class="java.lang.String" itemvalue="Mocha.Logless.#cleanup().Removes the correct listener on callback" />
      <item index="84" class="java.lang.String" itemvalue="Mocha.Logless.#cleanup().Removes the correct listener on done" />
      <item index="85" class="java.lang.String" itemvalue="Mocha.Logless.#cleanup().Removes the correct listener on exception" />
      <item index="86" class="java.lang.String" itemvalue="Mocha.Logless.Network Issues.Handles wrong domain" />
      <item index="87" class="java.lang.String" itemvalue="Mocha.Logless.Network Issues.Handles non-response domain" />
      <item index="88" class="java.lang.String" itemvalue="Mocha.test/client/lambda-server-test.ts" />
    </list>
    <recent_temporary>
      <list size="85">
        <item index="0" class="java.lang.String" itemvalue="Mocha.test/client/lambda-server-test.ts" />
        <item index="1" class="java.lang.String" itemvalue="Mocha.BSTEncode.#encodeAndPublishURL().Encodes and Publishes a URL" />
        <item index="2" class="java.lang.String" itemvalue="Mocha.test/client/bst-encode-test.ts" />
        <item index="3" class="java.lang.String" itemvalue="Mocha.test/logless/logless-test.ts" />
        <item index="4" class="java.lang.String" itemvalue="Mocha.Logless.#cleanup().Removes the correct listener on done" />
        <item index="5" class="java.lang.String" itemvalue="Mocha.Logless.#cleanup().Removes the correct listener on exception" />
        <item index="6" class="java.lang.String" itemvalue="Mocha.Logless.Network Issues.Handles non-response domain" />
        <item index="7" class="java.lang.String" itemvalue="Mocha.Logless.Network Issues.Handles wrong domain" />
        <item index="8" class="java.lang.String" itemvalue="Mocha.Logless.#cleanup().Removes the correct listener on callback" />
        <item index="9" class="java.lang.String" itemvalue="Mocha.Logless.#cleanup().Removes the correct listener" />
        <item index="10" class="java.lang.String" itemvalue="Mocha.Logless" />
        <item index="11" class="java.lang.String" itemvalue="Mocha.Logless.Logging Stuff on Callback.Logs stuff on callback with system error" />
        <item index="12" class="java.lang.String" itemvalue="Mocha.Logless.Logging Stuff on Callback.Logs stuff on callback with 'plain' error" />
        <item index="13" class="java.lang.String" itemvalue="Mocha.Logless.Logging Stuff on Callback.Logs stuff on callback with results" />
        <item index="14" class="java.lang.String" itemvalue="Mocha.Logless.Handles Exceptions.Logs stuff on uncaught exception" />
        <item index="15" class="java.lang.String" itemvalue="Mocha.Logless.Handles Exceptions.Logs stuff on throws a string" />
        <item index="16" class="java.lang.String" itemvalue="Mocha.Logless.Handles Exceptions.Logs stuff on exception" />
        <item index="17" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Logs stuff on timer" />
        <item index="18" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Throws error if there is no handler passed" />
        <item index="19" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Logs stuff on fail" />
        <item index="20" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Logs stuff on succeed" />
        <item index="21" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Logs stuff on done with error" />
        <item index="22" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Logs real stuff" />
        <item index="23" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Logs stuff on done" />
        <item index="24" class="java.lang.String" itemvalue="Mocha.BSTEncode.#encodeAndPublishURL().Encodes and Publishes a URL as another name" />
        <item index="25" class="java.lang.String" itemvalue="Mocha.BespokeServerTest.ReceiveWebhook.Connects Multiple Lambdas" />
        <item index="26" class="java.lang.String" itemvalue="Mocha.test/server/bespoke-server-test.ts" />
        <item index="27" class="java.lang.String" itemvalue="Mocha.test/client/bst-deploy-test.ts" />
        <item index="28" class="java.lang.String" itemvalue="Mocha.LambdaDeploy.prepares the lambda function code.runs npm" />
        <item index="29" class="java.lang.String" itemvalue="Mocha.test/core/webhook-request-test.ts" />
        <item index="30" class="java.lang.String" itemvalue="Mocha.WebhookRequest.SimplePost.All Data At Once" />
        <item index="31" class="java.lang.String" itemvalue="Mocha.WebhookRequest.SimplePost.Has path" />
        <item index="32" class="java.lang.String" itemvalue="Mocha.WebhookRequest.SimplePost.Has lower-case headers" />
        <item index="33" class="java.lang.String" itemvalue="Mocha.BespokeServerTest.ReceiveWebhook.Connects NoOp Lambda" />
        <item index="34" class="java.lang.String" itemvalue="Mocha.test/server/statistics-test.ts" />
        <item index="35" class="java.lang.String" itemvalue="Mocha.StatisticsTest.#delete().Creates and deletes table" />
        <item index="36" class="java.lang.String" itemvalue="Mocha.StatisticsTest.#delete().Deletes and recreates table" />
        <item index="37" class="java.lang.String" itemvalue="Mocha.StatisticsTest.#delete().Captures Node ID stats" />
        <item index="38" class="java.lang.String" itemvalue="Mocha.StatisticsTest.#capture().Captures Node ID stats" />
        <item index="39" class="java.lang.String" itemvalue="Mocha.BSTEncode.#encodeAndPublishFile().Encodes and Publishes a file" />
        <item index="40" class="java.lang.String" itemvalue="Mocha.BSTEncode.#encodeAndPublishURL().Encodes and Publishes a URL that is m4a" />
        <item index="41" class="java.lang.String" itemvalue="Mocha.test/client/bst-encoder-test.ts" />
        <item index="42" class="java.lang.String" itemvalue="Mocha.test/core/file-util-test.ts" />
        <item index="43" class="java.lang.String" itemvalue="Mocha.FileUtil.copy().Fails to copy a file - bad target" />
        <item index="44" class="java.lang.String" itemvalue="Mocha.FileUtil.copy().Fails to copy a file" />
        <item index="45" class="java.lang.String" itemvalue="Mocha.FileUtil.copy().Copies a file" />
        <item index="46" class="java.lang.String" itemvalue="Mocha.FileUtil.#read()" />
        <item index="47" class="java.lang.String" itemvalue="Mocha.FileUtil.#read().Reads and returns a buffer" />
        <item index="48" class="java.lang.String" itemvalue="Mocha.BSTEncoder.#encodeAndPublishFile().Encodes and Publishes a file" />
        <item index="49" class="java.lang.String" itemvalue="Mocha.BSTEncoder.#encodeAndPublishURL().Tries to encode bad URL" />
        <item index="50" class="java.lang.String" itemvalue="Mocha.BSTEncoder.#encodeAndPublishURL().Encodes and Publishes a URL that is m4a" />
        <item index="51" class="java.lang.String" itemvalue="Mocha.BSTEncoder.#encodeAndPublishURL().Encodes and Publishes a URL" />
        <item index="52" class="java.lang.String" itemvalue="Mocha.HTTPBuffer.HTTPResponse tests.Chunked payload, headers and body split" />
        <item index="53" class="java.lang.String" itemvalue="Mocha.Logless.Handles Exceptions" />
        <item index="54" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Logs stuff on throws a string" />
        <item index="55" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Logs stuff on exception" />
        <item index="56" class="java.lang.String" itemvalue="Mocha.Logless.Logging Stuff on Callback.Logs stuff on callback with error" />
        <item index="57" class="java.lang.String" itemvalue="Mocha.BSTEncoder.#encodeAndPublish().Bad URL" />
        <item index="58" class="java.lang.String" itemvalue="Mocha.BSTEncoder.#encodeAndPublish().Encodes and Publishes" />
        <item index="59" class="java.lang.String" itemvalue="Mocha.Logless.Logging Stuff on Callback.Logs stuff on done" />
        <item index="60" class="java.lang.String" itemvalue="Mocha.Logless.Logging Using the Lambda Context.Logs stuff" />
        <item index="61" class="java.lang.String" itemvalue="Mocha.BSTAlexa.AudioPlayer Tests.#playbackStopped().PlaybackStopped" />
        <item index="62" class="java.lang.String" itemvalue="Mocha.test/client/bst-alexa-test.ts" />
        <item index="63" class="java.lang.String" itemvalue="Mocha.BSTAlexa.AudioPlayer Tests.#playbackNearlyFinished().Audio Item Nearly Finished" />
        <item index="64" class="java.lang.String" itemvalue="Mocha.AudioPlayer.#play.Enqueues a track, existing track is playing" />
        <item index="65" class="java.lang.String" itemvalue="Mocha.test/alexa/audio-player-test.ts" />
        <item index="66" class="java.lang.String" itemvalue="Mocha.LambdaServer.#start().Checks Context Stuff" />
        <item index="67" class="java.lang.String" itemvalue="Mocha.LambdaServer.#start().Uses Callback Successfully" />
        <item index="68" class="java.lang.String" itemvalue="Mocha.LambdaServer" />
        <item index="69" class="java.lang.String" itemvalue="Mocha.BSTAlexa.Speaks and Intends.#intended().Intended with bad intent" />
        <item index="70" class="java.lang.String" itemvalue="Mocha.ServiceRequest.#intentRequest().Correctly parses intents" />
        <item index="71" class="java.lang.String" itemvalue="Mocha.BSTAlexa.AudioPlayer Tests.#playbackFinished().Audio Item Finished" />
        <item index="72" class="java.lang.String" itemvalue="Mocha.BSTAlexa.Speaks and Intends.#on().On no match for audio event" />
        <item index="73" class="java.lang.String" itemvalue="Mocha.BSTAlexa.Speaks and Intends.#once().On no match for audio event" />
        <item index="74" class="java.lang.String" itemvalue="Mocha.AudioPlayer.#play.Plays a track, stops" />
        <item index="75" class="java.lang.String" itemvalue="Mocha.Alexa.#spoken().Handles session attributes" />
        <item index="76" class="java.lang.String" itemvalue="Mocha.BSTAlexa.Speaks and Intends.#once().On no match for event" />
        <item index="77" class="java.lang.String" itemvalue="Mocha.BSTAlexa.Speaks and Intends.#on().On skill response received" />
        <item index="78" class="java.lang.String" itemvalue="Mocha.BSTAlexa.Speaks and Intends.#once().Once skill response received" />
        <item index="79" class="java.lang.String" itemvalue="Mocha.BSTAlexa.Speaks and Intends.#on().On no match for event" />
        <item index="80" class="java.lang.String" itemvalue="Mocha.BSTAlexa.AudioPlayer Tests.#playbackNearlyFinished().Audio Item Finished" />
        <item index="81" class="java.lang.String" itemvalue="Mocha.BSTAlexa.AudioPlayer Tests.#once().Audio Item Started Event received" />
        <item index="82" class="java.lang.String" itemvalue="Mocha.BSTAlexa.AudioPlayer Tests.#on().Audio Item Started Event received" />
        <item index="83" class="java.lang.String" itemvalue="Mocha.test/alexa/alexa-test.ts" />
        <item index="84" class="java.lang.String" itemvalue="Node.js.typedoc.js" />
      </list>
    </recent_temporary>
  </component>
  <component name="ShelveChangesManager" show_recycled="false">
    <option name="remove_strategy" value="false" />
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="fbbf632f-9e0b-48d2-b6e9-fed3f694d071" name="Default" comment="" />
      <created>1467381895370</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1467381895370</updated>
      <workItem from="1472764101501" duration="22490000" />
      <workItem from="1472843359895" duration="13783000" />
      <workItem from="1473267046955" duration="8951000" />
      <workItem from="1473430091961" duration="597000" />
      <workItem from="1473430874312" duration="1308000" />
      <workItem from="1473643952910" duration="34388000" />
      <workItem from="1473807161628" duration="12941000" />
      <workItem from="1473876790623" duration="261000" />
      <workItem from="1473877109723" duration="135000" />
      <workItem from="1473877256158" duration="18557000" />
      <workItem from="1473952600490" duration="5654000" />
      <workItem from="1474081017999" duration="598000" />
      <workItem from="1474139423237" duration="598000" />
      <workItem from="1474143430419" duration="528000" />
      <workItem from="1474302796544" duration="23660000" />
      <workItem from="1474405135411" duration="27496000" />
      <workItem from="1474908379866" duration="56167000" />
      <workItem from="1475452756615" duration="9000" />
      <workItem from="1475503007497" duration="464000" />
      <workItem from="1475534546467" duration="24071000" />
      <workItem from="1475707321513" duration="27456000" />
      <workItem from="1475788932579" duration="16915000" />
      <workItem from="1476115345543" duration="32410000" />
      <workItem from="1476384568519" duration="56443000" />
      <workItem from="1476831896579" duration="69000" />
      <workItem from="1476831978075" duration="16886000" />
      <workItem from="1476895316246" duration="82713000" />
      <workItem from="1477586585131" duration="18795000" />
      <workItem from="1477678887282" duration="1204000" />
      <workItem from="1477935601013" duration="4038000" />
    </task>
    <servers />
  </component>
  <component name="TestHistory">
    <history-entry file="test_client_lambda-server-test_ts - 2016.10.31 at 15h 57m 27s.xml">
      <configuration name="test/client/lambda-server-test.ts" configurationId="mocha-javascript-test-runner" />
    </history-entry>
    <history-entry file="test_client_lambda-server-test_ts - 2016.10.31 at 15h 57m 59s.xml">
      <configuration name="test/client/lambda-server-test.ts" configurationId="mocha-javascript-test-runner" />
    </history-entry>
    <history-entry file="test_client_lambda-server-test_ts - 2016.10.31 at 15h 58m 08s.xml">
      <configuration name="test/client/lambda-server-test.ts" configurationId="mocha-javascript-test-runner" />
    </history-entry>
    <history-entry file="test_client_lambda-server-test_ts - 2016.10.31 at 15h 58m 23s.xml">
      <configuration name="test/client/lambda-server-test.ts" configurationId="mocha-javascript-test-runner" />
    </history-entry>
    <history-entry file="test_client_lambda-server-test_ts - 2016.10.31 at 15h 59m 14s.xml">
      <configuration name="test/client/lambda-server-test.ts" configurationId="mocha-javascript-test-runner" />
    </history-entry>
    <history-entry file="test_client_lambda-server-test_ts - 2016.10.31 at 15h 59m 23s.xml">
      <configuration name="test/client/lambda-server-test.ts" configurationId="mocha-javascript-test-runner" />
    </history-entry>
    <history-entry file="test_client_lambda-server-test_ts - 2016.10.31 at 15h 59m 34s.xml">
      <configuration name="test/client/lambda-server-test.ts" configurationId="mocha-javascript-test-runner" />
    </history-entry>
    <history-entry file="test_client_lambda-server-test_ts - 2016.10.31 at 15h 59m 46s.xml">
      <configuration name="test/client/lambda-server-test.ts" configurationId="mocha-javascript-test-runner" />
    </history-entry>
    <history-entry file="test_client_lambda-server-test_ts - 2016.10.31 at 15h 59m 58s.xml">
      <configuration name="test/client/lambda-server-test.ts" configurationId="mocha-javascript-test-runner" />
    </history-entry>
    <history-entry file="test_client_lambda-server-test_ts - 2016.10.31 at 16h 02m 28s.xml">
      <configuration name="test/client/lambda-server-test.ts" configurationId="mocha-javascript-test-runner" />
    </history-entry>
  </component>
  <component name="TimeTrackingManager">
    <option name="totallyTimeSpent" value="509585000" />
  </component>
  <component name="ToolWindowManager">
    <frame x="4" y="23" width="1436" height="877" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info id="TypeScript" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32992327" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
      <window_info id="Project" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.26044568" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32992327" sideWeight="0.43941504" order="12" side_tool="true" content_ui="tabs" />
      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32992327" sideWeight="0.54735374" order="9" side_tool="false" content_ui="tabs" />
      <window_info id="Run" active="true" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.3286445" sideWeight="0.56058496" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="11" side_tool="false" content_ui="tabs" />
      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="true" content_ui="tabs" />
      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.39897698" sideWeight="0.5271588" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="TypeScript Compiler" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32992327" sideWeight="0.47493038" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Messages" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="10" side_tool="false" content_ui="tabs" />
      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="SLIDING" type="SLIDING" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.39897698" sideWeight="0.4972145" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="npm" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="true" content_ui="tabs" />
      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
      <window_info id="Inspection Results" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="FLOATING" visible="false" show_stripe_button="true" weight="0.32992327" sideWeight="0.5" order="13" side_tool="false" content_ui="tabs" x="421" y="259" width="602" height="404" />
      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32992327" sideWeight="0.454039" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
    </layout>
    <layout-to-restore>
      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="TypeScript Compiler" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32992327" sideWeight="0.47493038" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Messages" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="10" side_tool="false" content_ui="tabs" />
      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="SLIDING" type="SLIDING" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32992327" sideWeight="0.43941504" order="12" side_tool="true" content_ui="tabs" />
      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.39897698" sideWeight="0.4972145" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32992327" sideWeight="0.54735374" order="9" side_tool="false" content_ui="tabs" />
      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.3286445" sideWeight="0.56058496" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="npm" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="true" content_ui="tabs" />
      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="11" side_tool="false" content_ui="tabs" />
      <window_info id="TypeScript" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32992327" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
      <window_info id="Project" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.26367462" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
      <window_info id="Inspection Results" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="FLOATING" visible="false" show_stripe_button="true" weight="0.32992327" sideWeight="0.5" order="13" side_tool="false" content_ui="tabs" x="421" y="259" width="602" height="404" />
      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32992327" sideWeight="0.454039" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="true" content_ui="tabs" />
      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.39897698" sideWeight="0.5271588" order="3" side_tool="false" content_ui="tabs" />
    </layout-to-restore>
  </component>
  <component name="Vcs.Log.UiProperties">
    <option name="RECENTLY_FILTERED_USER_GROUPS">
      <collection />
    </option>
    <option name="RECENTLY_FILTERED_BRANCH_GROUPS">
      <collection />
    </option>
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/test/alexa/audio-player-test.js</url>
          <line>225</line>
          <option name="timeStamp" value="417" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/lib/alexa/alexa-session.ts</url>
          <line>18</line>
          <option name="timeStamp" value="444" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/test/client/bst-alexa-test.ts</url>
          <line>157</line>
          <option name="timeStamp" value="448" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/test/resources/CallbackLambda.js</url>
          <line>9</line>
          <option name="timeStamp" value="452" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/test/client/bst-encode-test.ts</url>
          <line>96</line>
          <option name="timeStamp" value="607" />
        </line-breakpoint>
      </breakpoints>
      <breakpoints-dialog>
        <breakpoints-dialog />
      </breakpoints-dialog>
      <option name="time" value="669" />
    </breakpoint-manager>
    <watches-manager>
      <configuration name="NodeJSConfigurationType">
        <watch expression="lineArray" language="TypeScript" />
        <watch expression="utterance.substr(14)" language="TypeScript" />
        <watch expression="this.interactionModel.sampleUtterances.samples[0]" language="TypeScript" />
        <watch expression="Object.keys(this.interactionModel.sampleUtterances.samples)" language="TypeScript" />
        <watch expression="this.intents()" language="TypeScript" />
        <watch expression="this.samples[firstIntent][0]" language="TypeScript" />
      </configuration>
      <configuration name="mocha-javascript-test-runner">
        <watch expression="this" language="TypeScript" />
        <watch expression="this.bucket()" language="TypeScript" />
      </configuration>
    </watches-manager>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/test/resources/DelayedLambda.js">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/bin/bst-deploy-test.js">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="272">
          <caret line="116" column="17" selection-start-line="116" selection-start-column="17" selection-end-line="116" selection-end-column="17" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/lib/server/statistics.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="92">
          <caret line="77" column="8" selection-start-line="77" selection-start-column="8" selection-end-line="77" selection-end-column="8" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/index.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="15">
          <caret line="1" column="20" selection-start-line="1" selection-start-column="20" selection-end-line="1" selection-end-column="20" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/index.js">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/node_modules/util/node_modules/inherits/package.json" />
    <entry file="file://$PROJECT_DIR$/lib/logless/logless.js">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="45">
          <caret line="8" column="1" selection-start-line="8" selection-start-column="1" selection-end-line="8" selection-end-column="1" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/logless/logless-test.js">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="4" column="0" selection-start-line="4" selection-start-column="0" selection-end-line="4" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/lib/core/logging-helper.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-690">
          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/bin/bst-deploy.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1725">
          <caret line="123" column="6" selection-start-line="123" selection-start-column="6" selection-end-line="123" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/bin/bst-proxy.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/lib/logless/logless-context.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="2910">
          <caret line="196" column="26" selection-start-line="196" selection-start-column="26" selection-end-line="196" selection-end-column="26" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/client/bst-encode-test.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1410">
          <caret line="95" column="40" selection-start-line="95" selection-start-column="20" selection-end-line="95" selection-end-column="40" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/typings/globals/node-4/index.d.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="13200">
          <caret line="886" column="51" selection-start-line="886" selection-start-column="37" selection-end-line="886" selection-end-column="51" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/typings.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/node_modules/gulp-typedoc/index.js" />
    <entry file="file://$PROJECT_DIR$/docs/api/index.html">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/.gitignore">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="135">
          <caret line="9" column="14" selection-start-line="9" selection-start-column="14" selection-end-line="9" selection-end-column="14" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/.travis.yml">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="60">
          <caret line="4" column="0" selection-start-line="4" selection-start-column="0" selection-end-line="4" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/tsconfig.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="195">
          <caret line="13" column="13" selection-start-line="13" selection-start-column="13" selection-end-line="13" selection-end-column="13" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/bin/bst.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="75">
          <caret line="7" column="0" selection-start-line="7" selection-start-column="0" selection-end-line="7" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/docs/development/webstorm.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
        <state split_layout="FIRST">
          <first_editor relative-caret-position="0">
            <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          </first_editor>
          <second_editor />
        </state>
      </provider>
      <provider editor-type-id="MarkdownFxPreviewEditor">
        <state />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/docs/development/testing.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
        <state split_layout="FIRST">
          <first_editor relative-caret-position="0">
            <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          </first_editor>
          <second_editor />
        </state>
      </provider>
      <provider editor-type-id="MarkdownFxPreviewEditor">
        <state />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/docs/development/developing.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
        <state split_layout="FIRST">
          <first_editor relative-caret-position="135">
            <caret line="9" column="17" selection-start-line="9" selection-start-column="17" selection-end-line="9" selection-end-column="17" />
          </first_editor>
          <second_editor />
        </state>
      </provider>
      <provider editor-type-id="MarkdownFxPreviewEditor">
        <state />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/node_modules/gulp-run/command.js">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-2258">
          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/node_modules/gulp-run/package.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-767">
          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/node_modules/gulp-run/gulpfile.js">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-210">
          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/docker/aws.env">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/docker/aws.env.encrypted">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/docker/Dockerfile">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="360">
          <caret line="24" column="14" selection-start-line="14" selection-start-column="0" selection-end-line="24" selection-end-column="14" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/codeship-services.yml">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="60">
          <caret line="4" column="46" selection-start-line="4" selection-start-column="46" selection-end-line="4" selection-end-column="46" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/codeship-steps.yml">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/resources/LoglessLambda.js">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="75">
          <caret line="5" column="3" selection-start-line="1" selection-start-column="0" selection-end-line="5" selection-end-column="3" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/docs/README.raw.md" />
    <entry file="file://$PROJECT_DIR$/docs/assets/css/style.css">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/mkdocs.yml">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="195">
          <caret line="13" column="27" selection-start-line="13" selection-start-column="27" selection-end-line="13" selection-end-column="27" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/docs/api_nav.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
        <state split_layout="FIRST">
          <first_editor relative-caret-position="105">
            <caret line="7" column="58" selection-start-line="7" selection-start-column="58" selection-end-line="7" selection-end-column="58" />
            <folding />
          </first_editor>
          <second_editor />
        </state>
      </provider>
      <provider editor-type-id="MarkdownFxPreviewEditor">
        <state />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/docs/api_readme.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
        <state split_layout="FIRST">
          <first_editor relative-caret-position="285">
            <caret line="19" column="104" selection-start-line="19" selection-start-column="104" selection-end-line="19" selection-end-column="104" />
            <folding />
          </first_editor>
          <second_editor />
        </state>
      </provider>
      <provider editor-type-id="MarkdownFxPreviewEditor">
        <state />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/lib/client/bst-encode.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="705">
          <caret line="52" column="0" selection-start-line="52" selection-start-column="0" selection-end-line="52" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/gulpfile.js">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="105">
          <caret line="40" column="34" selection-start-line="40" selection-start-column="34" selection-end-line="40" selection-end-column="34" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/package.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="277">
          <caret line="53" column="46" selection-start-line="53" selection-start-column="46" selection-end-line="53" selection-end-column="46" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/logless/logless-test.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="270">
          <caret line="317" column="44" selection-start-line="317" selection-start-column="44" selection-end-line="317" selection-end-column="44" />
          <folding>
            <element signature="e#51#82#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/docs/index.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
        <state split_layout="FIRST">
          <first_editor relative-caret-position="126">
            <caret line="47" column="75" selection-start-line="47" selection-start-column="13" selection-end-line="47" selection-end-column="75" />
            <folding />
          </first_editor>
          <second_editor />
        </state>
      </provider>
      <provider editor-type-id="MarkdownFxPreviewEditor">
        <state />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/docs/getting_started.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
        <state split_layout="FIRST">
          <first_editor relative-caret-position="411">
            <caret line="32" column="0" selection-start-line="32" selection-start-column="0" selection-end-line="32" selection-end-column="0" />
            <folding />
          </first_editor>
          <second_editor />
        </state>
      </provider>
      <provider editor-type-id="MarkdownFxPreviewEditor">
        <state />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/README.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
        <state split_layout="FIRST">
          <first_editor relative-caret-position="-81">
            <caret line="32" column="0" selection-start-line="32" selection-start-column="0" selection-end-line="32" selection-end-column="0" />
            <folding />
          </first_editor>
          <second_editor />
        </state>
      </provider>
      <provider editor-type-id="MarkdownFxPreviewEditor">
        <state />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/docs/development/documenting.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
        <state split_layout="FIRST">
          <first_editor relative-caret-position="75">
            <caret line="6" column="1" selection-start-line="6" selection-start-column="1" selection-end-line="6" selection-end-column="1" />
            <folding />
          </first_editor>
          <second_editor />
        </state>
      </provider>
      <provider editor-type-id="MarkdownFxPreviewEditor">
        <state />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/lib/logless/logless.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-283">
          <caret line="26" column="13" selection-start-line="26" selection-start-column="13" selection-end-line="26" selection-end-column="13" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/lib/client/lambda-server.js">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="287">
          <caret line="146" column="39" selection-start-line="146" selection-start-column="39" selection-end-line="146" selection-end-column="39" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/lib/client/lambda-server.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="257">
          <caret line="183" column="42" selection-start-line="183" selection-start-column="42" selection-end-line="183" selection-end-column="42" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/node_modules/remap-istanbul/typings/browser/ambient/node/index.d.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="165">
          <caret line="1449" column="20" selection-start-line="1449" selection-start-column="20" selection-end-line="1449" selection-end-column="20" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/client/lambda-server-test.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="150">
          <caret line="179" column="45" selection-start-line="179" selection-start-column="45" selection-end-line="179" selection-end-column="45" />
          <folding />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ScopeChooserConfigurable.UI">
        <settings>
          <last-edited>Typescript Files</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
          <order>
            <scope name="Typescript Files" />
          </order>
        </settings>
      </state>
    </states>
  </component>
</project>